name: Build and Deploy
on:
  push:
    tags: ["v[0-9].[0-9]+.[0-9]+"]
    branches:
      - "development"
      - "staging"
      - "main"
  workflow_dispatch:
    inputs:
      run_update_asg_only:
        description: 'Run only the update ASG process'
        required: true
        default: 'false'
        type: boolean
      manual_ami_id:
        description: 'Manually specify AMI ID (leave empty to use default)'
        required: false
        type: string

env:
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
  HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
  HCP_ORGANIZATION_ID: ${{ secrets.HCP_ORGANIZATION_ID }}
  HCP_BUCKET_NAME: "learn-packer-github-actions"
  SSH_PACKER: ${{ secrets.SSH_PACKER }}
  SSH_PACKER_PUB: ${{ secrets.SSH_PACKER_PUB }}
  DEFAULT_AMI_NAME: "al2023-ami-2023.4.20240528.0-kernel-6.1-x86_64"
  DEFAULT_AMI_OWNER: "659248058490"

jobs:
  build-artifact:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version_fingerprint: ${{ steps.hcp.outputs.version_fingerprint }}
      ami_id: ${{ steps.ami.outputs.ami_id }}
    if: github.event.inputs.run_update_asg_only != 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v4.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1 
      - name: Packer Init
        run: packer init .
      - name: Packer Build - Branches
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          packer build \
            -var "SSH_PACKER=${{ secrets.SSH_PACKER }}" \
            -var "SSH_PACKER_PUB=${{ secrets.SSH_PACKER_PUB }}" \
            .
      - name: Packer Build - Tags
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          HCP_PACKER_BUILD_FINGERPRINT=$(date +'%m%d%YT%H%M%S') packer build \
            -var "SSH_PACKER=${{ secrets.SSH_PACKER }}" \
            -var "SSH_PACKER_PUB=${{ secrets.SSH_PACKER_PUB }}" \
            .
      - name: Get HCP Packer version fingerprint from Packer Manifest
        id: hcp
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          version_fingerprint=$(echo "$build" | jq -r '.custom_data.version_fingerprint')
          echo "version_fingerprint=$version_fingerprint" >> $GITHUB_OUTPUT
      - name: Get AMI ID from Packer Manifest
        id: ami
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          ami_id=$(echo "$build" | jq -r '.artifact_id' | cut -d':' -f2)
          echo "ami_id=$ami_id" >> $GITHUB_OUTPUT
          echo "AMI ID from Packer build: $ami_id"

  update-hcp-packer-channel:
    name: Update HCP Packer channel
    needs: ["build-artifact"]
    runs-on: ubuntu-latest
    if: github.event.inputs.run_update_asg_only != 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
      - name: Create and set channel
        working-directory: .github/scripts
        run: |
          channel_name=$( echo ${{github.ref_name}} | sed 's/\./-/g')
          ./create_channel_version.sh $HCP_BUCKET_NAME $channel_name "${{ needs.build-artifact.outputs.version_fingerprint }}"

  update-asg:
    name: Update Frontend Auto Scaling Group
    needs: ["build-artifact"]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v4.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1
      
      - name: Determine AMI ID
        id: get_ami
        run: |
          if [ -n "${{ github.event.inputs.manual_ami_id }}" ]; then
            echo "Using manually specified AMI ID"
            AMI_ID="${{ github.event.inputs.manual_ami_id }}"
          elif [ "${{ github.event.inputs.run_update_asg_only }}" == "true" ]; then
            echo "Using default AMI"
            AMI_ID=$(aws ec2 describe-images \
              --owners ${{ env.DEFAULT_AMI_OWNER }} \
              --filters "Name=name,Values=${{ env.DEFAULT_AMI_NAME }}" \
                        "Name=virtualization-type,Values=hvm" \
                        "Name=root-device-type,Values=ebs" \
              --query 'Images[0].ImageId' \
              --output text)
          else
            echo "Using AMI from Packer build process"
            AMI_ID="${{ needs.build-artifact.outputs.ami_id }}"
          fi
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
          echo "Using AMI ID: $AMI_ID"

      - name: Update Frontend ASG with new AMI
        env:
          FRONTEND_ASG_NAME: scaling-group-dev-frontend
          LAUNCH_TEMPLATE_NAME: templete-for-heshbonaitplus-fontend
        run: |
          AMI_ID=${{ steps.get_ami.outputs.ami_id }}
          
          # יצירת גרסה חדשה של תבנית ההשקה עם AMI חדש
          NEW_LAUNCH_TEMPLATE_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_TEMPLATE_NAME" \
            --source-version '$Latest' \
            --launch-template-data '{
              "ImageId":"'"$AMI_ID"'"
            }' \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          # עדכון ה-Frontend Auto Scaling Group
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $FRONTEND_ASG_NAME \
            --launch-template LaunchTemplateName=$LAUNCH_TEMPLATE_NAME,Version=$NEW_LAUNCH_TEMPLATE_VERSION

          # התחלת רענון המופעים
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $FRONTEND_ASG_NAME

          echo "Frontend Auto Scaling Group $FRONTEND_ASG_NAME עודכן עם AMI חדש: $AMI_ID"

      - name: Wait for Instance Refresh Completion
        env:
          FRONTEND_ASG_NAME: scaling-group-dev-frontend
        run: |
          echo "ממתין לסיום רענון המופעים..."
          while true; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $FRONTEND_ASG_NAME \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            if [ "$REFRESH_STATUS" = "Successful" ]; then
              echo "רענון המופעים הושלם בהצלחה!"
              break
            elif [ "$REFRESH_STATUS" = "Failed" ] || [ "$REFRESH_STATUS" = "Cancelled" ]; then
              echo "רענון המופעים נכשל או בוטל. סטטוס: $REFRESH_STATUS"
              exit 1
            elif [ "$REFRESH_STATUS" = "InProgress" ]; then
              echo "רענון המופעים עדיין בתהליך. סטטוס נוכחי: $REFRESH_STATUS"
              sleep 30
            else
              echo "סטטוס לא צפוי: $REFRESH_STATUS. בודק שוב..."
              sleep 30
            fi
          done