name: Build and Deploy
on:
  push:
    tags: ["v[0-9]+\\.[0-9]+\\.[0-9]+"]
    branches: ["development", "staging", "main"]
  workflow_dispatch:
    inputs:
      run_update_asg_only:
        description: 'Run only the update ASG process'
        required: true
        default: false
        type: boolean
      manual_ami_id:
        description: 'Manually specify AMI ID (leave empty to use default)'
        required: false
        type: string

env:
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
  HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
  HCP_ORGANIZATION_ID: ${{ secrets.HCP_ORGANIZATION_ID }}
  HCP_BUCKET_NAME: "learn-packer-github-actions"
  SSH_PACKER: ${{ secrets.SSH_PACKER }}
  SSH_PACKER_PUB: ${{ secrets.SSH_PACKER_PUB }}
  DEFAULT_AMI_NAME: "al2023-ami-2023.4.20240528.0-kernel-6.1-x86_64"
  DEFAULT_AMI_OWNER: "659248058490"

jobs:
  build-artifact:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version_fingerprint: ${{ steps.hcp.outputs.version_fingerprint }}
      ami_id: ${{ steps.ami.outputs.ami_id }}
    if: github.event.inputs.run_update_asg_only != 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1 
      - name: Packer Init
        run: packer init .
      - name: Packer Build - Branches
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          packer build \
            -var "SSH_PACKER=${{ secrets.SSH_PACKER }}" \
            -var "SSH_PACKER_PUB=${{ secrets.SSH_PACKER_PUB }}" \
            .
      - name: Packer Build - Tags
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          HCP_PACKER_BUILD_FINGERPRINT=$(date +'%m%d%YT%H%M%S') packer build \
            -var "SSH_PACKER=${{ secrets.SSH_PACKER }}" \
            -var "SSH_PACKER_PUB=${{ secrets.SSH_PACKER_PUB }}" \
            .
      - name: Get HCP Packer version fingerprint from Packer Manifest
        id: hcp
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          version_fingerprint=$(echo "$build" | jq -r '.custom_data.version_fingerprint')
          echo "version_fingerprint=$version_fingerprint" >> $GITHUB_OUTPUT
      - name: Get AMI ID from Packer Manifest
        id: ami
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          ami_id=$(echo "$build" | jq -r '.artifact_id' | cut -d':' -f2)
          echo "ami_id=$ami_id" >> $GITHUB_OUTPUT
          echo "AMI ID from Packer build: $ami_id"

  update-hcp-packer-channel:
    name: Update HCP Packer channel
    needs: build-artifact
    runs-on: ubuntu-latest
    if: github.event.inputs.run_update_asg_only != 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Create and set channel
        working-directory: .github/scripts
        run: |
          channel_name=$(echo "${{ github.ref_name }}" | sed 's/\\./-/g')
          ./create_channel_version.sh "$HCP_BUCKET_NAME" "$channel_name" "${{ needs.build-artifact.outputs.version_fingerprint }}"

  update-asg:
    name: Update Frontend Auto Scaling Group
    needs: build-artifact
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1
      - name: Determine and Validate AMI ID
        id: get_ami
        run: |
          AMI_ID=${{ github.event.inputs.manual_ami_id }}
          if [ -z "$AMI_ID" ]; then
            AMI_ID=${{ needs.build-artifact.outputs.ami_id }}
          fi
          if [ -z "$AMI_ID" ] || [[ ! "$AMI_ID" =~ ^ami-[a-f0-9]{8,17}$ ]]; then
            echo "Error: Invalid AMI ID: '$AMI_ID'"
            exit 1
          fi
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
      - name: Update and Refresh ASG
        env:
          FRONTEND_ASG_NAME: scaling-group-dev-frontend
          LAUNCH_TEMPLATE_NAME: template-for-heshbonaitplus-frontend
        run: |
          AMI_ID=${{ steps.get_ami.outputs.ami_id }}
          
          if [ -z "$AMI_ID" ] || [[ ! "$AMI_ID" =~ ^ami-[a-f0-9]{8,17}$ ]]; then
            echo "Error: Invalid AMI ID: '$AMI_ID'"
            exit 1
          fi
          
          ACTIVE_REFRESH=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $FRONTEND_ASG_NAME \
            --query 'InstanceRefreshes[?Status==`InProgress`].InstanceRefreshId' \
            --output text)
          
          if [ -n "$ACTIVE_REFRESH" ]; then
            echo "רענון מופעל פעיל כבר קיים. ממתין לסיום..."
            aws autoscaling wait instance-refresh-in-progress \
              --auto-scaling-group-name $FRONTEND_ASG_NAME
            echo "הרענון הקיים הסתיים. ממשיך לעדכון חדש."
          fi
          
          ASG_CONFIG=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names $FRONTEND_ASG_NAME \
            --query 'AutoScalingGroups[0]')
          
          CURRENT_MIN=$(echo $ASG_CONFIG | jq -r '.MinSize')
          CURRENT_MAX=$(echo $ASG_CONFIG | jq -r '.MaxSize')
          CURRENT_DESIRED=$(echo $ASG_CONFIG | jq -r '.DesiredCapacity')
          
          echo "הגדלת Max Capacity זמנית ל-2"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $FRONTEND_ASG_NAME \
            --max-size 2
          
           USER_DATA=$(cat << 'EOF' | base64 -w 0
#!/bin/bash
set -e
echo "Starting application..."
cd /home/ec2-user/app
pm2 start npm --name "heshbonaitplus" -- start
echo "Application started successfully."
EOF
)
          
          NEW_LAUNCH_TEMPLATE_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_TEMPLATE_NAME" \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\",\"UserData\":\"$USER_DATA\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $FRONTEND_ASG_NAME \
            --launch-template LaunchTemplateName=$LAUNCH_TEMPLATE_NAME,Version=$NEW_LAUNCH_TEMPLATE_VERSION
          
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $FRONTEND_ASG_NAME \
            --preferences '{"MinHealthyPercentage": 100}'
          
          echo "Frontend Auto Scaling Group $FRONTEND_ASG_NAME עודכן עם AMI חדש: $AMI_ID"
          
          echo "ממתין לסיום רענון המופעים..."
          while true; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $FRONTEND_ASG_NAME \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            if [ "$REFRESH_STATUS" = "Successful" ]; then
              echo "רענון המופעים הושלם בהצלחה!"
              break
            elif [ "$REFRESH_STATUS" = "Failed" ] || [ "$REFRESH_STATUS" = "Cancelled" ]; then
              echo "רענון המופעים נכשל או בוטל. סטטוס: $REFRESH_STATUS"
              exit 1
            elif [ "$REFRESH_STATUS" = "InProgress" ]; then
              echo "רענון המופעים עדיין בתהליך. סטטוס נוכחי: $REFRESH_STATUS"
              sleep 30
            else
              echo "סטטוס לא צפוי: $REFRESH_STATUS. בודק שוב..."
              sleep 30
            fi
          done
          
          TARGET_GROUP_ARN=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names $FRONTEND_ASG_NAME \
            --query 'AutoScalingGroups[0].TargetGroupARNs[0]' \
            --output text)
          
          echo "ממתין 60 שניות לפני בדיקת בריאות ה-ALB..."
          sleep 60
          
          TARGET_HEALTH=$(aws elbv2 describe-target-health \
            --target-group-arn $TARGET_GROUP_ARN \
            --query 'TargetHealthDescriptions[0].TargetHealth.State' \
            --output text)
          
          if [ "$TARGET_HEALTH" != "healthy" ]; then
            echo "המכונה החדשה לא בריאה ב-ALB. בודק את הלוגים ואת הגדרות האפליקציה."
            exit 1
          fi
          
          echo "המכונה החדשה בריאה ב-ALB."
          
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $FRONTEND_ASG_NAME \
            --min-size $CURRENT_MIN \
            --max-size $CURRENT_MAX \
            --desired-capacity $CURRENT_DESIRED
          
          echo "update works!!"