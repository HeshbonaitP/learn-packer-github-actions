name: Build, Deploy, and Update ASG
on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch to checkout from Backend repo (main or develop)'
        required: true
        default: 'main'
        type: choice
        options:
        - main
        - develop
      run_update_asg_only:
        description: 'Run only the update ASG process3'
        required: true
        default: false
        type: boolean
      manual_ami_id:
        description: 'Manually specify AMI ID (leave empty to use default or built AMI)'
        required: false
        type: string
      use_default_ami:
        description: 'Use the default AMI'
        required: true
        default: false
        type: boolean
env:
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
  HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
  HCP_ORGANIZATION_ID: ${{ secrets.HCP_ORGANIZATION_ID }}
  HCP_BUCKET_NAME: "learn-packer-github-actions"
  SSH_PACKER: ${{ secrets.SSH_PACKER }}
  SSH_PACKER_PUB: ${{ secrets.SSH_PACKER_PUB }}
  DEFAULT_AMI_NAME: "al2023-ami-2023.4.20240528.0-kernel-6.1-x86_64"
  DEFAULT_AMI_OWNER: "659248058490"
  AMI_ID: ami-02bd14a7de0ef4613
  JAVA_VERSION: '17'
  BACKEND_REPO: 'HeshbonaitP/Backend'
  LAUNCH_TEMPLATE_NAME: templete-dev-backend

jobs:
  compile-backend:
    name: Compile Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BACKEND_REPO }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: ${{ github.event.inputs.branch_name || 'main' }}
      
      - name: Set up JDK and Maven
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'
          cache: 'maven'
      
      - name: Build with Maven
        run: |
          mvn clean package \
          -Dmaven.compiler.source=17 \
          -Dmaven.compiler.target=17 \
          -Djava.version=17 \
          -Dspring.jpa.hibernate.ddl-auto=none \
          -Dspring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false \
          -DskipTests
      
      - name: Upload compiled JAR
        uses: actions/upload-artifact@v2
        with:
          name: compiled-backend
          path: target/*.jar

  build-artifact:
    name: Build AMI
    needs: compile-backend
    runs-on: ubuntu-latest
    outputs:
           version_fingerprint: ${{ steps.hcp.outputs.version_fingerprint }}
           ami_id: ${{ steps.ami.outputs.ami_id }}
    if: github.event.inputs.run_update_asg_only != 'true' && github.event.inputs.use_default_ami != 'true'
    steps:
    - name: Checkout Backend Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.BACKEND_REPO }}
        ref: ${{ github.event.inputs.branch_name || 'main' }}
        token: ${{ secrets.REPO_ACCESS_TOKEN }}

      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1
      
    - name: Ensure backend-jar directory exists
      run: mkdir -p ./backend-jar

    - name: Download compiled JAR
      uses: actions/download-artifact@v2
      with:
          name: compiled-backend
          path: ./backend-jar

    - name: Check backend-jar content
      run: |
          echo "Current directory:"
          pwd
          echo "Contents of current directory:"
          ls -la
          echo "Contents of ./backend-jar:"
          ls -la ./backend-jar
          echo "JAR file details:"
          find ./backend-jar -name "*.jar" -type f -exec ls -l {} \;
      
    - name: Packer Init
      run: packer init .

    - name: Get latest AMI from Launch Template
      run: |
          LATEST_LT_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-name "${{ env.LAUNCH_TEMPLATE_NAME }}" \
            --versions '$Latest' \
            --query 'LaunchTemplateVersions[0].VersionNumber' \
            --output text)
          LATEST_AMI=$(aws ec2 describe-launch-template-versions \
            --launch-template-name "${{ env.LAUNCH_TEMPLATE_NAME }}" \
            --versions $LATEST_LT_VERSION \
            --query 'LaunchTemplateVersions[0].LaunchTemplateData.ImageId' \
            --output text)
          echo "LATEST_AMI=$LATEST_AMI" >> $GITHUB_ENV
      
    - name: Packer Build
      run: |
          JAR_FILE=$(find ./backend-jar -name "*.jar" -type f)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: No JAR file found"
            exit 1
          fi
          echo "Using JAR file: $JAR_FILE"
          packer build \
            -var "SSH_PACKER=${{ secrets.SSH_PACKER }}" \
            -var "SSH_PACKER_PUB=${{ secrets.SSH_PACKER_PUB }}" \
            -var "COMPILED_JAR_PATH=$JAR_FILE" \
            -var "source_ami=${{ env.LATEST_AMI }}" \
            .
      
    - name: Check backend-jar content after Packer
      run: |
          echo "Contents of ./backend-jar after Packer:"
          ls -l ./backend-jar
      
    - name: Get HCP Packer version fingerprint from Packer Manifest
      id: hcp
      run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          version_fingerprint=$(echo "$build" | jq -r '.custom_data.version_fingerprint')
          echo "version_fingerprint=$version_fingerprint" >> $GITHUB_OUTPUT
      
    - name: Get AMI ID from Packer Manifest
      id: ami
      run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          ami_id=$(echo "$build" | jq -r '.artifact_id' | cut -d':' -f2)
          echo "ami_id=$ami_id" >> $GITHUB_OUTPUT
          echo "AMI ID from Packer build: $ami_id"

  update-hcp-packer-channel:
    name: Update HCP Packer channel
    needs: build-artifact
    runs-on: ubuntu-latest
    if: github.event.inputs.run_update_asg_only != 'true' && github.event.inputs.use_default_ami != 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Create and set channel
        working-directory: .github/scripts
        run: |
          channel_name=$(echo "${{ github.ref_name }}" | sed 's/\\./-/g')
          ./create_channel_version.sh "$HCP_BUCKET_NAME" "$channel_name" "${{ needs.build-artifact.outputs.version_fingerprint }}"

  update-asg:
    name: Update Auto Scaling Group
    needs: build-artifact
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1
      
      - name: Update and Refresh ASG
        env:
          FRONTEND_ASG_NAME: AUTO-SCALING-DEV-BACKEND
          LAUNCH_TEMPLATE_NAME: templete-dev-backend
          NEW_AMI_ID: ${{ needs.build-artifact.outputs.ami_id }}
        run: |
          echo "NEW_AMI_ID: $NEW_AMI_ID"
          if [ -z "$NEW_AMI_ID" ]; then
            echo "Error: NEW_AMI_ID is empty"
            exit 1
          fi
          echo "Using new AMI ID: $NEW_AMI_ID"
          chmod +x ".github/scripts/Updated update_asg.sh"
          ".github/scripts/Updated update_asg.sh" "$NEW_AMI_ID" "$FRONTEND_ASG_NAME" "$LAUNCH_TEMPLATE_NAME"
